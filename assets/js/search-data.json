{
  
    
        "post0": {
            "title": "fastcore: An Underrated Python Library",
            "content": ". Background . I recently embarked on a journey to sharpen my python skills: I wanted to learn advanced patterns, idioms, and techniques. I started with reading books on advanced Python, however, the information didn&#39;t seem to stick without having somewhere to apply it. I also wanted the ability to ask questions from an expert while I was learning -- which is an arrangement that is hard to find! That&#39;s when it occurred to me: What if I could find an open source project that has fairly advanced python code and write documentation and tests? I made a bet that if I did this it would force me to learn everything very deeply, and the maintainers would be appreciative of my work and be willing to answer my questions. . And that&#39;s exactly what I did over the past month! I&#39;m pleased to report that it has been the most efficient learning experience I&#39;ve ever experienced. I&#39;ve discovered that writing documentation forced me to deeply understand not just what the code does but also why the code works the way it does, and to explore edge cases while writing tests. Most importantly, I was able to ask questions when I was stuck, and maintainers were willing to devote extra time knowing that their mentorship was in service of making their code more accessible! It turns out the library I choose, fastcore is some of the most fascinating Python I have ever encountered as its purpose and goals are fairly unique. . For the uninitiated, fastcore is a library on top of which many fast.ai projects are built on. Most importantly, fastcore extends the python programming language and strives to eliminate boilerplate and add useful functionality for common tasks. In this blog post, I&#39;m going to highlight some of my favorite tools that fastcore provides, rather than sharing what I learned about python. My goal is to pique your interest in this library, and hopefully motivate you to check out the documentation after you are done to learn more! . Why fastcore is interesting . Get exposed to ideas from other languages without leaving python: I’ve always heard that it is beneficial to learn other languages in order to become a better programmer. From a pragmatic point of view, I’ve found it difficult to learn other languages because I could never use them at work. Fastcore extends python to include patterns found in languages as diverse as Julia, Ruby and Haskell. Now that I understand these tools I am motivated to learn other languages. | You get a new set of pragmatic tools: fastcore includes utilities that will allow you to write more concise expressive code, and perhaps solve new problems. | Learn more about the Python programming language: Because fastcore extends the python programming language, many advanced concepts are exposed during the process. For the motivated, this is a great way to see how many of the internals of python work. | A whirlwind tour through fastcore . Here are some things you can do with fastcore that immediately caught my attention. . . Making **kwargs transparent . Whenever I see a function that has the argument **kwargs, I cringe a little. This is because it means the API is obfuscated and I have to read the source code to figure out what valid parameters might be. Consider the below example: . def baz(a, b=2, c =3, d=4): return a + b + c def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, **kwargs)&gt; . Without reading the source code, it might be hard for me to know that foo also accepts and additional parameters b and d. We can fix this with delegates: . def baz(a, b=2, c =3, d=4): return a + b + c @delegates(baz) # this decorator will pass down keyword arguments from baz def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4)&gt; . You can customize the behavior of this decorator. For example, you can have your cake and eat it too by passing down your arguments and also keeping **kwargs: . @delegates(baz, keep=True) def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4, **kwargs)&gt; . You can also exclude arguments. For example, we exclude argument d from delegation: . def basefoo(a, b=2, c =3, d=4): pass @delegates(basefoo, but= [&#39;d&#39;]) # exclude `d` def foo(c, a, **kwargs): pass inspect.signature(foo) . &lt;Signature (c, a, b=2)&gt; . You can also delegate between classes: . class BaseFoo: def __init__(self, e, c=2): pass @delegates()# since no argument was passsed here we delegate to the superclass class Foo(BaseFoo): def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs) inspect.signature(Foo) . &lt;Signature (a, b=1, c=2)&gt; . For more information, read the docs on delegates. . . Avoid boilerplate when setting instance attributes . Have you ever wondered if it was possible to avoid the boilerplate involved with setting attributes in __init__? . class Test: def __init__(self, a, b ,c): self.a, self.b, self.c = a, b, c . Ouch! That was painful. Look at all the repeated variable names. Do I really have to repeat myself like this when defining a class? Not Anymore! Checkout store_attr: . class Test: def __init__(self, a, b, c): store_attr() t = Test(5,4,3) assert t.b == 4 . You can also exclude certain attributes: . class Test: def __init__(self, a, b, c): store_attr(but=[&#39;c&#39;]) t = Test(5,4,3) assert t.b == 4 assert not hasattr(t, &#39;c&#39;) . There are many more ways of customizing and using store_attr than I highlighted here. Check out the docs for more detail. . . Avoiding subclassing boilerplate . One thing I hate about python is the __super__().__init__() boilerplate associated with subclassing. For example: . class ParentClass: def __init__(self): self.some_attr = &#39;hello&#39; class ChildClass(ParentClass): def __init__(self): super().__init__() cc = ChildClass() assert cc.some_attr == &#39;hello&#39; # only accessible b/c you used super . We can avoid this boilerplate by using the metaclass PrePostInitMeta. We define a new class called NewParent that is a wrapper around the ParentClass: . class NewParent(ParentClass, metaclass=PrePostInitMeta): def __pre_init__(self, *args, **kwargs): super().__init__() class ChildClass(NewParent): def __init__(self):pass sc = ChildClass() assert sc.some_attr == &#39;hello&#39; . . Type Dispatch . Type dispatch, or Multiple dispatch, allows you to change the way a function behaves based upon the input types it receives. This is a prominent feature in some programming languages like Julia. For example, this is a conceptual example of how multiple dispatch works in Julia, returning different values depending on the input types of x and y: . collide_with(x::Asteroid, y::Asteroid) = ... # deal with asteroid hitting asteroid collide_with(x::Asteroid, y::Spaceship) = ... # deal with asteroid hitting spaceship collide_with(x::Spaceship, y::Asteroid) = ... # deal with spaceship hitting asteroid collide_with(x::Spaceship, y::Spaceship) = ... # deal with spaceship hitting spaceship . Type dispatch can be especially useful in data science, where you might allow different input types (i.e. Numpy arrays and Pandas dataframes) to a function that processes data. Type dispatch allows you to have a common API for functions that do similar tasks. . Unfortunately, Python does not support this out-of-the box. Fortunately, there is the @typedispatch decorator to the rescue. This decorator relies upon type hints in order to route inputs the correct version of the function: . @typedispatch def f(x:str, y:str): return f&#39;{x}{y}&#39; @typedispatch def f(x:np.ndarray): return x.sum() @typedispatch def f(x:int, y:int): return x+y . Below is a demonstration of type dispatch at work for the function f: . f(&#39;Hello &#39;, &#39;World!&#39;) . &#39;Hello World!&#39; . f(2,3) . 5 . f(np.array([5,5,5,5])) . 20 . There are limitations of this feature, as well as other ways of using this functionality that you can read about here. In the process of learning about typed dispatch, I also found a python library called multipledispatch made by Mathhew Rocklin (the creator of Dask). . After using this feature, I am now motivated to learn languages like Julia to discover what other paradigms I might be missing. . . A better version of functools.partial . functools.partial is a great utility that creates functions from other functions that lets you set default values. Lets take this function for example that filters a list to only contain values &gt;= val: . test_input = [1,2,3,4,5,6] def f(arr, val): &quot;Filter a list to remove any values that are less than val.&quot; return [x for x in arr if x &gt;= val] f(test_input, 3) . [3, 4, 5, 6] . You can create a new function out of this function using partial that sets the default value to 5: . filter5 = partial(f, val=5) filter5(test_input) . [5, 6] . One problem with partial is that it removes the original docstring and replaces it with a generic docstring: . filter5.__doc__ . &#39;partial(func, *args, **keywords) - new function with partial application n of the given arguments and keywords. n&#39; . fastcore.utils.partialler fixes this, and makes sure the docstring is retained such that the new API is transparent: . filter5 = partialler(f, val=5) filter5.__doc__ . &#39;Filter a list to remove any values that are less than val.&#39; . . Composition of functions . A technique that is pervasive in functional programming languages is function composition, whereby you chain a bunch of functions together to achieve some kind of result. This is especially useful when applying various data transformations. Consider a toy example where I have three functions: (1) Removes elements of a list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all the numbers: . def add(arr, val): return [x + val for x in arr] def arrsum(arr): return sum(arr) # See the previous section on partialler add2 = partialler(add, val=2) transform = compose(filter5, add2, arrsum) transform([1,2,3,4,5,6]) . 15 . But why is this useful? You might me thinking, I can accomplish the same thing with: . arrsum(add2(filter5([1,2,3,4,5,6]))) . You are not wrong! However, composition gives you a convenient interface in case you want to do something like the following: . def fit(x, transforms:list): &quot;fit a model after performing transformations&quot; x = compose(*transforms)(x) y = [np.mean(x)] * len(x) # its a dumb model. Don&#39;t judge me return y # filters out elements &lt; 5, adds 2, then predicts the mean fit(x=[1,2,3,4,5,6], transforms=[filter5, add2]) . [7.5, 7.5] . For more information about compose, read the docs. . . A more useful __repr__ . In python, __repr__ helps you get information about an object for logging and debugging. Below is what you get by default when you define a new class. (Note: we are using store_attr, which was discussed earlier). . class Test: def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously Test(1) . &lt;__main__.Test at 0x7fe0ab662790&gt; . We can use basic_repr to quickly give us a more sensible default: . class Test: def __init__(self, a, b=2, c=3): store_attr() __repr__ = basic_repr(&#39;a,b,c&#39;) Test(2) . Test(a=2, b=2, c=3) . . Monkey Patching With A Decorator . It can be convenient to monkey patch with a decorator, which is especially helpful when you want to patch an external library you are importing. We can use the decorator @patch from fastcore.foundation along with type hints like so: . class MyClass(int): pass @patch def func(self:MyClass, a): return self+a mc = MyClass(3) . Now, MyClass has an additional method named func: . mc.func(10) . 13 . Still not convinced? I&#39;ll show you another example of this kind of patching in the next section. . . A better pathlib.Path . When you see these extensions to pathlib.path you won&#39;t ever use vanilla pathlib again! A number of additional methods have been added to pathlib, such as: . Path.readlines: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.readlines() | Path.read: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.read() | Path.save: saves file as pickle | Path.load: loads pickle file | Path.ls: shows the contents of the path as a list. | etc. | . Read more about this here. Here is a demonstration of ls: . from pathlib import Path p = Path(&#39;../_notebooks&#39;) p.ls() # you don&#39;t get this with vanilla Pathlib.Path!! . (#21) [Path(&#39;../_notebooks/gpt2_simple_mask.jpg&#39;),Path(&#39;../_notebooks/bert_mac_small.jpg&#39;),Path(&#39;../_notebooks/causal_with_prefix.jpg&#39;),Path(&#39;../_notebooks/.DS_Store&#39;),Path(&#39;../_notebooks/2020-03-07-How_to_Create_an_Automatic_Code_Comment_Generator_using_Deep_Learning.ipynb&#39;),Path(&#39;../_notebooks/2020-09-01-fastcore.ipynb&#39;),Path(&#39;../_notebooks/2020-03-07-Syntax-Highlighting.ipynb&#39;),Path(&#39;../_notebooks/2020-03-06-bart.ipynb&#39;),Path(&#39;../_notebooks/README.md&#39;),Path(&#39;../_notebooks/2020-05-01-TrainDonkeyCar.ipynb&#39;)...] . Wait! What&#39;s going on here? We just imported pathlib.Path - why are we getting this new functionality? Thats because we imported the fastcore.foundation module, which patches this module via the @patch decorator discussed earlier. Just to drive the point home on why the @patch decorator is useful, I&#39;ll go ahead and add another method to Path right now: . @patch def fun(self:Path): return &quot;This is fun!&quot; p.fun() . &#39;This is fun!&#39; . That is magical, right? I know! That&#39;s why I&#39;m writing about it! . . An Even More Concise Way To Create Lambdas . Self, with an uppercase S, is an even more concise way to create lambdas that are calling methods on an object. For example, let&#39;s create a lambda for taking the sum of a Numpy array: . arr=np.array([5,4,3,2,1]) f = lambda a: a.sum() assert f(arr) == 15 . You can use Self in the same way: . f = Self.sum() assert f(arr) == 15 . Let&#39;s create a lambda that does a groupby and max of a Pandas dataframe: . import pandas as pd df=pd.DataFrame({&#39;Some Column&#39;: [&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, ], &#39;Another Column&#39;: [5, 7, 50, 70]}) f = Self.groupby(&#39;Some Column&#39;).mean() f(df) . Another Column . Some Column . a 6 | . b 60 | . Read more about Self in the docs). . . Notebook Functions . These are simple but handy, and allow you to know whether or not code is executing in a Jupyter Notebook, Colab, or an Ipython Shell: . in_notebook(), in_colab(), in_ipython() . (True, False, True) . This is useful if you are displaying certain types of visualizations, progress bars or animations in your code that you may want to modify or toggle depending on the environment. . . A Drop-In Replacement For List . You might be pretty happy with Python&#39;s list. This is one of those situations that you don&#39;t know you needed a better list until someone showed one to you. Enter L, a list like object with many extra goodies. . The best way I can describe L is to pretend that list and numpy had a pretty baby: . define a list (check out the nice __repr__ that shows the length of the list!) . L(1,2,3) . (#3) [1,2,3] . Shuffle a list: . p = L.range(20).shuffle() p . (#20) [2,0,18,6,15,17,14,8,12,1...] . Index into a list: . p[2,4,6] . (#3) [18,15,14] . L has sensible defaults, for example appending an element to a list: . 1 + L(2,3,4) . (#4) [1,2,3,4] . There is much more L has to offer. Read the docs to learn more. . But Wait ... There&#39;s More! . There are more things I would like to show you about fastcore, but there is no way they would reasonably fit into a blog post. Here is a list of some of my favorite things that I didn&#39;t demo in this blog post: . Utilities . The Utilites section contain many shortcuts to perform common tasks or provide an additional interface to what standard python provides. . mk_class: quickly add a bunch of attributes to a class | wrap_class: add new methods to a class with a simple decorator | groupby: similar to Scala&#39;s groupby | merge: merge dicts | fasttuple: a tuple on steroids | Infinite Lists: useful for padding and testing | chunked: for batching and organizing stuff | . Multiprocessing . The Multiprocessing section extends python&#39;s multiprocessing library by offering features like: . progress bars | ability to pause to mitigate race conditions with external services | processing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks | . Functional Programming . The functional programming section is my favorite part of this library. . maps: a map that also composes functions | mapped: A more robust map | using_attr: compose a function that operates on an attribute | . Transforms . Transforms is a collection of utilities for creating data transformations and associated pipelines. These transformation utilities build upon many of the building blocks discussed in this blog post. . Further Reading . It should be noted that you should read the main page of the docs first, followed by the section on tests to fully understand the documentation. . The fastcore documentation site. | The fastcore GitHub repo. | Blog post on delegation. | . Shameless plug: fastpages . This blog post was written entirely in a Jupyter Notebook, which GitHub automatically converted into to a blog post! Sound interesting? Check out fastpages. .",
            "url": "http://blog.jjsantoso.com/fastcore/",
            "relUrl": "/fastcore/",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Redes y contratos públicos",
            "content": "Imports y globals . Imports . import pymongo import pandas as pd import json import matplotlib.pyplot as plt import networkx as nx from NetworkUtils import draw_network . globals . dir_datos = &#39;d:/datos/licitaciones_compranet&#39; myclient = pymongo.MongoClient(&quot;mongodb://localhost:27017/&quot;) mydb = myclient[&#39;dataton2019&#39;] . Funciones . An&#225;lisis de asociados . Contacpoints . Creaci&#243;n de la base . Creamos una base de datos que tenga identificado a cada punto de contacto. | Los puntos de contacto se obtienen a partir de los contratistas que tienen información o su dirección. | . resultado = mydb.contrataciones.find({}, {&#39;_id&#39;: 0, &#39;parties.contactPoint&#39;: 1, &#39;parties.roles&#39;: 1, &#39;parties.id&#39;: 1, &#39;parties.address&#39;: 1}) . df_contactos = pd.DataFrame([{**p.get(&#39;contactPoint&#39;, &#39;&#39;), **p.get(&#39;address&#39;, &#39;&#39;), &#39;tenderer_id&#39;: p[&#39;id&#39;] } for x in resultado for p in x[&#39;parties&#39;] if (p[&#39;roles&#39;] in [[&#39;tenderer&#39;], [&#39;tenderer&#39;, &#39;supplier&#39;]]) &amp; ((bool(p.get(&#39;address&#39;, None))) | (bool(p.get(&#39;contactPoint&#39;, None))))]) df_contactos.to_pickle(f&#39;{dir_datos}/tenderers_contacpoint.pkl&#39;) df_contactos.head() . name email telephone streetAddress locality region postalCode countryName tenderer_id faxNumber . 0 IRAM LIEVANOS VELAZQUEZ | laroca.canino@gmail.com | 52 722 093749 | PASEO DE LA ASUNCION NO. 536 | METEPEC | MX-MEX | 52148 | MÉXICO | E9C1C827AE1234CCF7AC4D9070BB597C | NaN | . 1 NaN | servillantas@prodigy.net.mx | 10191684 | JOSE MORAN 66 | MIGUEL HIDALGO | MX-CMX | 11850 | MÉXICO | SCA031118BX7 | NaN | . 2 NaN | sportingautoreparaciones@gmail.com | 55 56397681 55 54894622 | PLUTARCO ELIAS CALLES No. 660. COL. SAN FRANCI... | Iztacalco | MX-CMX | 08230 | MÉXICO | SAU0505307M9 | NaN | . 3 EDGAR GUSTAVO TREJO KEMPER | edgarg_kemper@hotmail.com; balcazar-sol@hotmai... | 5543419836 | CALZADA VALLEJO NUMERO 1020 | AZCAPOTZALCO | MX-CMX | 02300 | MÉXICO | SCK070618C21 | 52 55 55873415 ext 201, 202, 203 | . 4 Daniel Ernesto De la Fuente Barra | daniel.delafuente@segurossura.com.mx | 5519636830 | BLVD ADOLFO LOPEZ MATEOS 2448 | ALVARO OBREGON | MX-CMX | 01060 | MÉXICO | R&amp;S811221KR6 | 57237999 Ext. 7965 | . De la base de datos de contrataciones seleccionamos los datos de contacto de los que han ganado licitaciones. Estos tiene datos como nombre de la persona de contacto, email, teléfono, número de fax, dirección y id del proveedor | . Uso de la base . df_contactos = pd.read_pickle(f&#39;{dir_datos}/tenderers_contacpoint.pkl&#39;) df_contactos.head() . name email telephone streetAddress locality region postalCode countryName tenderer_id faxNumber . 0 IRAM LIEVANOS VELAZQUEZ | laroca.canino@gmail.com | 52 722 093749 | PASEO DE LA ASUNCION NO. 536 | METEPEC | MX-MEX | 52148 | MÉXICO | E9C1C827AE1234CCF7AC4D9070BB597C | NaN | . 1 NaN | servillantas@prodigy.net.mx | 10191684 | JOSE MORAN 66 | MIGUEL HIDALGO | MX-CMX | 11850 | MÉXICO | SCA031118BX7 | NaN | . 2 NaN | sportingautoreparaciones@gmail.com | 55 56397681 55 54894622 | PLUTARCO ELIAS CALLES No. 660. COL. SAN FRANCI... | Iztacalco | MX-CMX | 08230 | MÉXICO | SAU0505307M9 | NaN | . 3 EDGAR GUSTAVO TREJO KEMPER | edgarg_kemper@hotmail.com; balcazar-sol@hotmai... | 5543419836 | CALZADA VALLEJO NUMERO 1020 | AZCAPOTZALCO | MX-CMX | 02300 | MÉXICO | SCK070618C21 | 52 55 55873415 ext 201, 202, 203 | . 4 Daniel Ernesto De la Fuente Barra | daniel.delafuente@segurossura.com.mx | 5519636830 | BLVD ADOLFO LOPEZ MATEOS 2448 | ALVARO OBREGON | MX-CMX | 01060 | MÉXICO | R&amp;S811221KR6 | 57237999 Ext. 7965 | . df_contactos.shape . (563693, 10) . De todos los contratos encontramos 563693 puntos de contacto. Muchos de estos se repiten porque un contratista que ganó varias veces aparecerá como un contacto por cada contrato ganado. | Calculamos todas las combinaciones únicas de telefono y tenderer_id. | Luego verificamos si existen casos en los que varios tenderer_id comparten el: teléfono: 700 casos en los que eso ocurre. | Email: 839 casos. | Nombre: 706 casos | Número de fax: 135 casos | Dirección de la calle: 172 casos | . | Todos estos son signos de sospecha. | En muchos casos hay cuentas de funcionarios públicos. Habría que verificar cuál es su papel. | La pregunta relevante es ¿Hay casos en los que contratistas que tienen contactos en común hayan participado en un mismo proceso de licitación? | . variables_contacto = [&#39;telephone&#39;, &#39;email&#39;, &#39;name&#39;, &#39;streetAddress&#39;, &#39;faxNumber&#39;] casos = [] for var_duplicated in variables_contacto: # Encontramos todos los valores únicos de la variable de contacto y de tenderer_id dups_direccion = df_contactos.loc[lambda x: (~x.duplicated(subset=[&#39;tenderer_id&#39;, var_duplicated])) &amp; (x[var_duplicated].notnull())] .loc[lambda x: (x[var_duplicated].duplicated()) &amp; (~x[&#39;name&#39;].str[:22].eq(&#39;- (Cuenta administrada&#39;)), var_duplicated].unique() # Encontramos cuáles son los tenderers_id que comparten un mismo contacto tenderers_dup_id = [df_contactos.loc[lambda x: x[var_duplicated].eq(dup)].drop_duplicates(subset=[&#39;tenderer_id&#39;])[&#39;tenderer_id&#39;].tolist() for dup in dups_direccion] # Buscamos los contratos en los que participaron los ids asociados queries_dup = [[{&#39;parties.id&#39;: i} for i in x] for x in tenderers_dup_id] for q in queries_dup: resultado = list(mydb.contrataciones.find({&#39;$and&#39;: q}, {&#39;_id&#39;: 0, &#39;ocid&#39;: 1})) if resultado: tenderers_id = [x[&#39;parties.id&#39;] for x in q] ocids = list({x[&#39;ocid&#39;] for x in resultado}) casos.append({&#39;tenderer_ids&#39;: tenderers_id, &#39;contratos_ocid&#39;: ocids, &#39;variable&#39;: var_duplicated}) print(q) with open(&#39;datos/casos_colusion.json&#39;, &#39;w&#39;, encoding=&#39;utf8&#39;) as jsonfile: json.dump(casos, jsonfile) . El resultado que encontramos es que existen 571 casos de contratistas posiblemente relacionados en una misma licitación. | . with open(&#39;datos/casos_colusion.json&#39;, &#39;r&#39;, encoding=&#39;utf8&#39;) as jsonfile: casos = json.load(jsonfile) . casos_ocid = list({c for cas in casos for c in cas[&#39;contratos_ocid&#39;]}) len(casos_ocid) . 571 . casos_contratos = list(mydb.contrataciones.find({&#39;ocid&#39;: {&#39;$in&#39;: casos_ocid}})) len(casos_contratos) . 619 . datos_contrato = [{&#39;titulo&#39;: c[&#39;contracts&#39;][0][&#39;title&#39;], &#39;descr&#39;: c[&#39;contracts&#39;][0].get(&#39;description&#39;, &#39;&#39;), &#39;valor&#39;: c[&#39;contracts&#39;][0][&#39;value&#39;][&#39;amount&#39;], &#39;dependencia_id&#39;: c[&#39;buyer&#39;][&#39;id&#39;], &#39;dependencia_nombre&#39;: c[&#39;buyer&#39;][&#39;name&#39;], &#39;uc_id&#39;: c[&#39;tender&#39;][&#39;procuringEntity&#39;][&#39;id&#39;], &#39;uc_name&#39;: c[&#39;tender&#39;][&#39;procuringEntity&#39;][&#39;name&#39;], &#39;ocid&#39;: c[&#39;ocid&#39;], &#39;fecha&#39;: c[&#39;date&#39;], } for c in casos_contratos if c.get(&#39;contracts&#39;, None)] df_datos_contratos = pd.DataFrame(datos_contrato).set_index(&#39;ocid&#39;) df_datos_contratos.head() . titulo descr valor dependencia_id dependencia_nombre uc_id uc_name fecha . ocid . ocds-07smqs-1317308 Servicio Integral de Suministro, Mantenimiento... | Servicio Integral de Suministro, Mantenimiento... | 450000.00 | CNBV-80 | Comisión Nacional Bancaria y de Valores | CNB950501PT6-006B00001 | CNBV-Dirección General Adjunta de Adquisicione... | 2017-03-29T05:13:19Z | . ocds-07smqs-1367848 PRESTADOR DE SERVICIOS INTEGRALES | PRESTADOR DE SERVICIOS INTEGRALES (HONORARIOS) | 44542.62 | SAGARPA-261 | Secretaría de Agricultura, Ganadería, Desarrol... | SAG010710V98-008000995 | SAGARPA-Delegacion Chihuahua #008000995 | 2017-05-22T12:24:14Z | . ocds-07smqs-1430619 CONTRATACIÓN ABIERTA DEL SERVICIO DE LECTURA E... | CONTRATACIÓN ABIERTA DEL SERVICIO DE LECTURA E... | 220000.00 | SEP-265 | Secretaría de Educación Pública | SEP210905778-011000999 | SEP-Dirección de Adquisiciones #011000999 | 2017-07-20T06:22:43Z | . ocds-07smqs-1444924 SERVICIO DE MANTENIMIENTO CORRECTIVO AL SISTEM... | SERVICIO DE MANTENIMIENTO CORRECTIVO AL SISTEM... | 287780.00 | CONAGUA-94 | Comisión Nacional del Agua | CNA890116SF2-016B00009 | CONAGUA-Gerencia de Resursos Materiales #016B0... | 2017-08-03T01:58:53Z | . ocds-07smqs-1452158 SERVICIO DE DIFUSIÓN EN MEDIOS DIGITALES DE LA... | SERVICIO DE DIFUSIÓN EN MEDIOS DIGITALES DE LA... | 68950.00 | CONUEE-98 | Comisión Nacional para el Uso Eficiente de la ... | CNU800928K31-018E00999 | CONUEE-Dirección de Recursos Materiales y Serv... | 2017-08-30T04:21:41Z | . casos_contratos[0] . {&#39;_id&#39;: ObjectId(&#39;5dcdb0c10d84ead5c49d2e99&#39;), &#39;publisher&#39;: {&#39;uid&#39;: &#39;27511&#39;, &#39;name&#39;: &#39;SECRETARÍA DE LA FUNCIÓN PÚBLICA&#39;, &#39;uri&#39;: &#39;http://www.gob.mx/sfp&#39;}, &#39;cycle&#39;: 2017, &#39;ocid&#39;: &#39;ocds-07smqs-1317308&#39;, &#39;id&#39;: &#39;SFP-1317308-2018-11-12&#39;, &#39;date&#39;: &#39;2017-03-29T05:13:19Z&#39;, &#39;tag&#39;: [&#39;tender&#39;, &#39;award&#39;], &#39;initiationType&#39;: &#39;tender&#39;, &#39;parties&#39;: [{&#39;name&#39;: &#39;Comisión Nacional Bancaria y de Valores&#39;, &#39;id&#39;: &#39;CNBV-80&#39;, &#39;roles&#39;: [&#39;buyer&#39;]}, {&#39;name&#39;: &#39;CNBV-Dirección General Adjunta de Adquisiciones y Contratos #006B00001&#39;, &#39;id&#39;: &#39;CNB950501PT6-006B00001&#39;, &#39;identifier&#39;: {&#39;id&#39;: &#39;CNB950501PT6-006B00001&#39;, &#39;legalName&#39;: &#39;CNBV-Dirección General Adjunta de Adquisiciones y Contratos #006B00001&#39;, &#39;scheme&#39;: &#39;MX-RFC&#39;, &#39;uri&#39;: &#39;https://portalsat.plataforma.sat.gob.mx/ConsultaRFC&#39;}, &#39;address&#39;: {&#39;streetAddress&#39;: &#39;Av. Insurgentes Sur No. 1971, Torre Sur, Piso 6, Col. Guadalupe Inn&#39;, &#39;locality&#39;: &#39;Álvaro Obregón&#39;, &#39;region&#39;: &#39;Ciudad de México&#39;, &#39;postalCode&#39;: &#39;01020&#39;, &#39;countryName&#39;: &#39;MX&#39;}, &#39;contactPoint&#39;: {&#39;name&#39;: &#39;Jannet Miriam Martínez Sánchez&#39;, &#39;email&#39;: &#39;jmartinezs@cnbv.gob.mx&#39;, &#39;telephone&#39;: &#39;1454-6537 y 1454-6538&#39;}, &#39;roles&#39;: [&#39;procuringEntity&#39;]}, {&#39;name&#39;: &#39;MARIANA REGALADO SOBERON&#39;, &#39;id&#39;: &#39;3CAB041C0551441CB0A31EAC594B2339&#39;, &#39;identifier&#39;: {&#39;id&#39;: &#39;3CAB041C0551441CB0A31EAC594B2339&#39;, &#39;legalName&#39;: &#39;MARIANA REGALADO SOBERON&#39;, &#39;scheme&#39;: &#39;MX-RFC&#39;, &#39;uri&#39;: &#39;https://portalsat.plataforma.sat.gob.mx/ConsultaRFC&#39;}, &#39;address&#39;: {}, &#39;contactPoint&#39;: {}, &#39;roles&#39;: [&#39;tenderer&#39;]}, {&#39;name&#39;: &#39;GRUPO SANMARI SA DE CV&#39;, &#39;id&#39;: &#39;GSA0310175N4&#39;, &#39;identifier&#39;: {&#39;id&#39;: &#39;GSA0310175N4&#39;, &#39;legalName&#39;: &#39;GRUPO SANMARI SA DE CV&#39;, &#39;scheme&#39;: &#39;MX-RFC&#39;, &#39;uri&#39;: &#39;https://portalsat.plataforma.sat.gob.mx/ConsultaRFC&#39;}, &#39;address&#39;: {&#39;streetAddress&#39;: &#39;AZTECAS 81 LA ROMANA&#39;, &#39;locality&#39;: &#39;Tlalnepantla de Baz&#39;, &#39;region&#39;: &#39;MX-MEX&#39;, &#39;postalCode&#39;: &#39;54050&#39;, &#39;countryName&#39;: &#39;MÉXICO&#39;}, &#39;contactPoint&#39;: {&#39;email&#39;: &#39;rafael@sanmari.com.mx&#39;, &#39;telephone&#39;: &#39;55-52409421&#39;}, &#39;roles&#39;: [&#39;tenderer&#39;]}, {&#39;name&#39;: &#39;HECTOR MANUEL SEGURA TORRE&#39;, &#39;id&#39;: &#39;E2E9D6DA235621FC08C1A0EFC4201B95&#39;, &#39;identifier&#39;: {&#39;id&#39;: &#39;E2E9D6DA235621FC08C1A0EFC4201B95&#39;, &#39;legalName&#39;: &#39;HECTOR MANUEL SEGURA TORRE&#39;, &#39;scheme&#39;: &#39;MX-RFC&#39;, &#39;uri&#39;: &#39;https://portalsat.plataforma.sat.gob.mx/ConsultaRFC&#39;}, &#39;address&#39;: {}, &#39;contactPoint&#39;: {}, &#39;roles&#39;: [&#39;tenderer&#39;]}, {&#39;name&#39;: &#39;GABRIEL DEL POZO RUIZ&#39;, &#39;id&#39;: &#39;AA2EEEF597460501F7B8A50B4DE1F671&#39;, &#39;identifier&#39;: {&#39;id&#39;: &#39;AA2EEEF597460501F7B8A50B4DE1F671&#39;, &#39;legalName&#39;: &#39;GABRIEL DEL POZO RUIZ&#39;, &#39;scheme&#39;: &#39;MX-RFC&#39;, &#39;uri&#39;: &#39;https://portalsat.plataforma.sat.gob.mx/ConsultaRFC&#39;}, &#39;address&#39;: {&#39;streetAddress&#39;: &#39;CEIBAS 45&#39;, &#39;locality&#39;: &#39;NAUCALPAN DE JUAREZ&#39;, &#39;region&#39;: &#39;MX-MEX&#39;, &#39;postalCode&#39;: &#39;53240&#39;, &#39;countryName&#39;: &#39;MÉXICO&#39;}, &#39;contactPoint&#39;: {&#39;name&#39;: &#39;GABRIEL DEL POZO RUIZ&#39;, &#39;email&#39;: &#39;mascontrolmenoscosto@yahoo.com.mx&#39;, &#39;telephone&#39;: &#39;525536259819&#39;}, &#39;roles&#39;: [&#39;tenderer&#39;, &#39;supplier&#39;]}], &#39;buyer&#39;: {&#39;name&#39;: &#39;Comisión Nacional Bancaria y de Valores&#39;, &#39;id&#39;: &#39;CNBV-80&#39;}, &#39;tender&#39;: {&#39;id&#39;: &#39;1317308&#39;, &#39;title&#39;: &#39;Servicio Integral de Suministro, Mantenimiento Plantas y Macetas&#39;, &#39;description&#39;: &#39;Servicio Integral de Suministro, Mantenimiento y Conservación de Plantas Naturales y Macetas Propiedad de la CNBV&#39;, &#39;status&#39;: &#39;complete&#39;, &#39;procuringEntity&#39;: {&#39;name&#39;: &#39;CNBV-Dirección General Adjunta de Adquisiciones y Contratos #006B00001&#39;, &#39;id&#39;: &#39;CNB950501PT6-006B00001&#39;}, &#39;items&#39;: [{&#39;id&#39;: &#39;7044016&#39;, &#39;description&#39;: &#39;Contratación de una Póliza de Seguro de Accidentes Personales para la protección de los participantes en acciones de capacitación del Programa de Apoyo al Empleo 2016.&#39;, &#39;classification&#39;: {&#39;id&#39;: &#39;33900006&#39;, &#39;description&#39;: &#39;Servicios de seguros de gastos medicos mayores&#39;}, &#39;quantity&#39;: 1, &#39;unit&#39;: {&#39;name&#39;: &#39;Servicio&#39;}}], &#39;value&#39;: {&#39;amount&#39;: 0}, &#39;procurementMethod&#39;: &#39;direct&#39;, &#39;procurementMethodRationale&#39;: &#39;Art. 42 párrafo primero&#39;, &#39;submissionMethod&#39;: [&#39;electronicSubmission&#39;], &#39;tenderPeriod&#39;: {&#39;startDate&#39;: &#39;2017-03-29T05:13:19Z&#39;}, &#39;enquiryPeriod&#39;: {&#39;startDate&#39;: &#39;2017-03-29T05:13:19Z&#39;}, &#39;hasEnquiries&#39;: False, &#39;awardPeriod&#39;: {&#39;endDate&#39;: &#39;2017-03-30T00:00:00Z&#39;}, &#39;numberOfTenderers&#39;: 4, &#39;tenderers&#39;: [{&#39;name&#39;: &#39;MARIANA REGALADO SOBERON&#39;, &#39;id&#39;: &#39;3CAB041C0551441CB0A31EAC594B2339&#39;}, {&#39;name&#39;: &#39;GRUPO SANMARI SA DE CV&#39;, &#39;id&#39;: &#39;GSA0310175N4&#39;}, {&#39;name&#39;: &#39;GABRIEL DEL POZO RUIZ&#39;, &#39;id&#39;: &#39;AA2EEEF597460501F7B8A50B4DE1F671&#39;}, {&#39;name&#39;: &#39;HECTOR MANUEL SEGURA TORRE&#39;, &#39;id&#39;: &#39;E2E9D6DA235621FC08C1A0EFC4201B95&#39;}]}, &#39;language&#39;: &#39;es&#39;, &#39;awards&#39;: [{&#39;id&#39;: &#39;1399908&#39;, &#39;title&#39;: &#39;Servicio Integral de Suministro, Mantenimiento Plantas y Macetas&#39;, &#39;description&#39;: &#39;Servicio Integral de Suministro, Mantenimiento y Conservación de Plantas Naturales y Macetas Propiedad de la CNBV&#39;, &#39;status&#39;: &#39;active&#39;, &#39;value&#39;: {&#39;amount&#39;: 450000, &#39;currency&#39;: &#39;MXN&#39;}, &#39;suppliers&#39;: [{&#39;name&#39;: &#39;GABRIEL DEL POZO RUIZ&#39;, &#39;id&#39;: &#39;AA2EEEF597460501F7B8A50B4DE1F671&#39;}], &#39;items&#39;: [{&#39;id&#39;: &#39;4645830&#39;, &#39;description&#39;: &#39;Servicio Integral de Suministro, Mantenimiento Plantas y Macetas&#39;, &#39;classification&#39;: {&#39;scheme&#39;: &#39;CUCOP: Clasificador Único de las Contrataciones Públicas&#39;, &#39;id&#39;: &#39;35900004&#39;, &#39;description&#39;: &#39;Servicios de jardineria&#39;, &#39;uri&#39;: &#39;https://compranetinfo.funcionpublica.gob.mx/descargas/CUCOP.xlsx&#39;}, &#39;quantity&#39;: 1, &#39;unit&#39;: {&#39;name&#39;: &#39;Servicio&#39;, &#39;value&#39;: {&#39;amount&#39;: 450000, &#39;currency&#39;: &#39;MXN&#39;}}}], &#39;contractPeriod&#39;: {&#39;startDate&#39;: &#39;2017-04-14T09:00:00Z&#39;, &#39;endDate&#39;: &#39;2018-06-18T03:59:00Z&#39;}}], &#39;contracts&#39;: [{&#39;id&#39;: 1399908, &#39;awardID&#39;: &#39;1399908&#39;, &#39;title&#39;: &#39;Servicio Integral de Suministro, Mantenimiento Plantas y Macetas&#39;, &#39;description&#39;: &#39;Servicio Integral de Suministro, Mantenimiento y Conservación de Plantas Naturales y Macetas Propiedad de la CNBV&#39;, &#39;status&#39;: &#39;terminated&#39;, &#39;period&#39;: {&#39;startDate&#39;: &#39;2017-04-14T09:00:00Z&#39;, &#39;endDate&#39;: &#39;2018-06-18T03:59:00Z&#39;}, &#39;value&#39;: {&#39;amount&#39;: 450000, &#39;currency&#39;: &#39;MXN&#39;}, &#39;items&#39;: [{&#39;id&#39;: &#39;4645830&#39;, &#39;description&#39;: &#39;Servicio Integral de Suministro, Mantenimiento Plantas y Macetas&#39;, &#39;classification&#39;: {&#39;id&#39;: &#39;35900004&#39;, &#39;description&#39;: &#39;Servicios de jardineria&#39;}, &#39;quantity&#39;: 1, &#39;unit&#39;: {&#39;name&#39;: &#39;Servicio&#39;, &#39;value&#39;: {&#39;amount&#39;: 450000, &#39;currency&#39;: &#39;MXN&#39;}}}]}]} . participantes_contrato = {c[&#39;ocid&#39;]: [p[&#39;id&#39;] for p in c[&#39;parties&#39;] if p[&#39;roles&#39;] in [[&#39;tenderer&#39;], [&#39;tenderer&#39;, &#39;supplier&#39;]]] for c in casos_contratos} # Número de particpantes que estaban asociados en cada contrato asociados_contrato = {o: c[&#39;tenderer_ids&#39;] for c in casos for o in c[&#39;contratos_ocid&#39;]} # ganador contrato ganadores_contrato = {c[&#39;ocid&#39;]: [p[&#39;id&#39;] for p in c[&#39;parties&#39;] if p[&#39;roles&#39;]==[&#39;tenderer&#39;, &#39;supplier&#39;]] for c in casos_contratos} # dataframe df_asoc = pd.DataFrame([participantes_contrato, asociados_contrato, ganadores_contrato]).T .rename(columns={0: &#39;part&#39;, 1: &#39;asoc&#39;, 2: &#39;gana&#39;}) .assign(N_part=lambda x: x[&#39;part&#39;].str.len(), N_asoc=lambda x: x[&#39;asoc&#39;].str.len(), N_gana=lambda x: x[&#39;gana&#39;].str.len(), prop_asoc_part=lambda x: x[&#39;N_asoc&#39;].div(x[&#39;N_part&#39;]), part_mayo=lambda x: x[&#39;prop_asoc_part&#39;].ge(0.5), asoc_ganadores=lambda x: x.apply(lambda y: list(set(y[&#39;gana&#39;]).intersection(set(y[&#39;asoc&#39;]))), axis=1), N_asoc_ganadores=lambda x: x[&#39;asoc_ganadores&#39;].str.len(), part_nogana=lambda x: x.apply(lambda y: list(set(y[&#39;part&#39;]).difference(set(y[&#39;gana&#39;]))), axis=1)) .join(df_datos_contratos) df_asoc.to_pickle(f&#39;{dir_datos}/df_asociados.pkl&#39;) df_asoc.head() . part asoc gana N_part N_asoc N_gana prop_asoc_part part_mayo asoc_ganadores N_asoc_ganadores part_nogana titulo descr valor dependencia_id dependencia_nombre uc_id uc_name fecha . ocds-07smqs-1043398 [TME840315KT6, BD03FBE666C3DBA5C57BCDC8BF0AA451] | [TME840315KT6, BD03FBE666C3DBA5C57BCDC8BF0AA451] | [TME840315KT6, BD03FBE666C3DBA5C57BCDC8BF0AA451] | 2 | 2 | 2 | 1.000000 | True | [BD03FBE666C3DBA5C57BCDC8BF0AA451, TME840315KT6] | 2 | [] | SERVICIO MPLS ATRAVES DE UN ENLACE DEDICADO CO... | | 169133.00 | CIJ-66 | Centros de Integración Juvenil, A.C. | CIJ731003QK3-012M7K001 | CIJ-Departamento de Adquisiciones #012M7K001 | 2016-04-18T12:02:38Z | . ocds-07smqs-1193763 [MLA840208FN5, D73016CAA1F8020E3BAC52068FB0B2D... | [D73016CAA1F8020E3BAC52068FB0B2D9, MLA840208FN5] | [MLA840208FN5, D73016CAA1F8020E3BAC52068FB0B2D... | 4 | 2 | 4 | 0.500000 | True | [MLA840208FN5, D73016CAA1F8020E3BAC52068FB0B2D9] | 2 | [] | ADQ. DE VIVERES PARA EJERCICIO 2017 | ADQ. DE VIVERES PARA EJERCICIO 2017 | 3880739.50 | IMSS-192 | Instituto Mexicano del Seguro Social | IMS421231I45-050GYR045 | IMSS-UMAE Hospital de Especilidades No.71 Dept... | 2016-12-09T05:26:28Z | . ocds-07smqs-1224403 [89E87098891F04A46318B7F775AD5E48, FAR100921AL... | [D73016CAA1F8020E3BAC52068FB0B2D9, MLA840208FN5] | [D73016CAA1F8020E3BAC52068FB0B2D9, 9D3346ADF0B... | 8 | 2 | 5 | 0.250000 | False | [MLA840208FN5, D73016CAA1F8020E3BAC52068FB0B2D9] | 2 | [FAR100921ALA, 89E87098891F04A46318B7F775AD5E4... | AA-019GYR026-E221-2016 DESIERTAS VIVERES | | 671930.69 | IMSS-192 | Instituto Mexicano del Seguro Social | IMS421231I45-050GYR026 | IMSS-Coordinación de abastecimiento y equipami... | 2016-12-02T05:49:52Z | . ocds-07smqs-1240190 [RDO070228V11, ATD061228L34, MEX0301141G6] | [RDO070228V11, ATD061228L34] | [MEX0301141G6] | 3 | 2 | 1 | 0.666667 | True | [] | 0 | [RDO070228V11, ATD061228L34] | SERVICIO DE RESGUARDO, CUSTODIA, TRASLADO, ENV... | SERVICIO DE RESGUARDO, CUSTODIA, TRASLADO, ENV... | 116379.72 | CPTM-109 | Consejo de Promoción Turística de México, S.A.... | CPT991022DE7-021W3J001 | CPTM-Gerencia de Adquisiciones y Licitaciones ... | 2016-12-20T06:52:52Z | . ocds-07smqs-1241959 [CGE130930JV2, CDA9601297G9, 23DF515587ED8B3F4... | [CDA9601297G9, 23DF515587ED8B3F4A8B1C9E4D725CAD] | [] | 3 | 2 | 0 | 0.666667 | True | [] | 0 | [CGE130930JV2, 23DF515587ED8B3F4A8B1C9E4D725CA... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . df_asoc = pd.read_pickle(f&#39;{dir_datos}/df_asociados.pkl&#39;) . ¿En cuántos de estos casos los contratistas representaban el 50% de los proponentes o más? | . print(&#39;Los contratistas representaban el 50% de los proponentes o más en&#39;, df_asoc.part_mayo.sum(), &#39;licitaciones&#39;) . Los contratistas representaban el 50% de los proponentes o más en 212 licitaciones . ¿En cuántos de estos casos los asociados fueron los únicos proponentes? | . print(&#39;¿En cuántos de estos casos los asociados fueron los únicos proponentes?&#39;, df_asoc.prop_asoc_part.eq(1).sum(), &#39;licitaciones&#39;) . ¿En cuántos de estos casos los asociados fueron los únicos proponentes? 41 licitaciones . De estos casos ¿en cuántas licitaciones los que estaban relacionados ganaron un concurso? | . print(&#39;En&#39;, df_asoc.N_asoc_ganadores.gt(0).sum(), &#39;licitaciones ganó al menos uno de los contratistas asociados&#39;) . En 370 licitaciones ganó al menos uno de los contratistas asociados . ¿Cuántos contratistas asociados recibieron un contrato? | . print(df_asoc.N_asoc_ganadores.sum(), &#39; contratistas asociados ganaron una licitación&#39;) . 552 contratistas asociados ganaron una licitación . ¿En qué dependencias, unidades compradoras y servidores públicos ocurre más esto? | . df_asoc.groupby([&#39;uc_name&#39;])[&#39;part&#39;].count().sort_values(ascending=False) . uc_name CONALITEG-Dirección de Recursos Materiales y Servicios Generales #011L6J001 33 IMSS-Departamento de Adquisición de Bienes y Contratación de Servicios #050GYR033 16 IMSS-Coordinación de Abastecimiento y Equipamiento #050GYR009 10 IMSS-Coordinación de Adquisición de Bienes y Contratación de Serv, Dirección de Administración #050GYR047 9 INER-Departamento de Adquisiciones #012NCD001 9 .. IMSS-UMAE HOSPITAL DE GINECO OBSTETRICIA No 03 DR VICTOR MANUEL ESPINOSA DE LOS REYES SANCHEZ CMN LA RAZA #050GYR050 1 IMSS-Coord. de Abastecimiento y Equipamiento Deleg. Ver. Sur #050GYR022 1 SCT-Centro SCT Chihuahua #009000980 1 SCT-CENTRO SCT EN CHIAPAS SUBDIRECCION DE ADMINISTRACION #009000992 1 Tribunales Agrarios-Dirección General de Recursos Materiales #031000001 1 Name: part, Length: 218, dtype: int64 . df_asoc.groupby([&#39;dependencia_nombre&#39;])[&#39;part&#39;].count().sort_values(ascending=False) . dependencia_nombre Instituto Mexicano del Seguro Social 215 Comisión Nacional de Libros de Texto Gratuitos 33 Instituto de Seguridad y Servicios Sociales de los Trabajadores del Estado 32 Comisión Federal de Electricidad 24 Comisión Nacional del Agua 15 ... Hospital Regional de Alta Especialidad de Oaxaca 1 Exportadora de Sal, S.A. de C.V. 1 El Colegio de la Frontera Sur 1 Corporación Mexicana de Investigación en Materiales, S.A. de C.V. 1 Administración Portuaria Integral de Progreso, S.A. de C.V. 1 Name: part, Length: 92, dtype: int64 . Crea red para visualizar . nodos = [] red = 1 for c, vals in df_asoc.iterrows(): nodos.append({&#39;id&#39;: c, &#39;tipo&#39;: &#39;contrato&#39;}) for p in vals[&#39;part_nogana&#39;]: nodos.append({&#39;id&#39;: p, &#39;tipo&#39;: &#39;tenderer&#39;}) links.append({&#39;origen_id&#39;: p, &#39;destino_id&#39;: c, &#39;accion&#39;: &#39;participa&#39;, &#39;red&#39;: red}) for p in vals[&#39;gana&#39;]: nodos.append({&#39;id&#39;: p, &#39;tipo&#39;: &#39;supplier&#39;}) links.append({&#39;origen_id&#39;: p, &#39;destino_id&#39;: c, &#39;accion&#39;: &#39;gana&#39;, &#39;red&#39;: red}) for p1 in vals[&#39;asoc&#39;]: for p2 in vals[&#39;asoc&#39;]: if p1!=p2: links.append({&#39;origen_id&#39;: p1, &#39;destino_id&#39;: p2, &#39;accion&#39;: &#39;asociado&#39;, &#39;red&#39;: red}) nodos.append({&#39;id&#39;: vals[&#39;uc_id&#39;], &#39;tipo&#39;: &#39;uc&#39;}) links.append({&#39;origen_id&#39;: vals[&#39;uc_id&#39;], &#39;destino_id&#39;: c, &#39;accion&#39;: &#39;compra&#39;, &#39;red&#39;: red}) red+=1 . df_nodos = pd.DataFrame(nodos) .assign(num=lambda x:x.index) dicc_nodo_num = {v:k for k,v in df_nodos[&#39;id&#39;].to_dict().items()} df_links = pd.DataFrame(links) .assign(origen_num=lambda x: x[&#39;origen_id&#39;].map(dicc_nodo_num), destino_num=lambda x: x[&#39;destino_id&#39;].map(dicc_nodo_num)) .dropna() df_links.head() . origen_id destino_id accion red origen_num destino_num . 25696 TME840315KT6 | ocds-07smqs-1043398 | gana | 1.0 | 287 | 0 | . 25697 BD03FBE666C3DBA5C57BCDC8BF0AA451 | ocds-07smqs-1043398 | gana | 1.0 | 286 | 0 | . 25698 TME840315KT6 | BD03FBE666C3DBA5C57BCDC8BF0AA451 | asociado | 1.0 | 287 | 286 | . 25699 BD03FBE666C3DBA5C57BCDC8BF0AA451 | TME840315KT6 | asociado | 1.0 | 286 | 287 | . 25700 CIJ731003QK3-012M7K001 | ocds-07smqs-1043398 | compra | 1.0 | 284 | 0 | . df_nodos.to_csv(&#39;datos/asociados_nodos.csv&#39;, index=False) df_links.to_csv(&#39;datos/asociados_links.csv&#39;, index=False) . Visualziacion networkX . df_nodos_graph = df_nodos.set_index(&#39;id&#39;) . for red in df_links.red.unique(): G = nx.from_pandas_edgelist(df_links.query(&#39;red==@red&#39;), source=&#39;origen_id&#39;, target=&#39;destino_id&#39;, edge_attr=[&#39;accion&#39;]) dicc_color_edges = {&#39;gana&#39;: &#39;green&#39;, &#39;asociado&#39;: &#39;red&#39;, &#39;participa&#39;: &#39;#3292a8&#39;, &#39;compra&#39;: &#39;orange&#39;} dicc_color_nodos = {&#39;contrato&#39;: &#39;#3292a8&#39;, &#39;supplier&#39;: &#39;pink&#39;, &#39;tenderer&#39;: &#39;blue&#39;, &#39;uc&#39;: &#39;orange&#39;} color_edges = [dicc_color_edges[e[2][&#39;accion&#39;]] for e in G.edges(data=True)] color_nodes = [dicc_color_nodos[df_nodos_graph.loc[[i], &#39;tipo&#39;].tolist()[0]] for i in G.nodes] fig, ax = plt.subplots() draw_network(G, color_edges=color_edges, color_nodes=color_nodes, axes=ax, labels=[1, 2, 4, 5], text_size=8) fig.savefig(f&#39;graficas/redes/red_{red}.png&#39;, dpi=200) plt.cla() . print(df_asoc.loc[[x for x in df_links.query(&#39;red==@red&#39;)[&#39;destino_id&#39;].unique() if &#39;ocds&#39; in x][0]]) . Tareas: . Procesar telefonos . | procesar múltiples mails . | Es posible obtener más datos de los contratistas a partir del RUCP, como el sitio web, giro del negocio . | . Buscar otra anomalía: todos los contratos con métodos abiertos en los que solo participa un proponente. Buscar contratos en los que todos los particpantes reciben contrato. . Buscar otra anomalía: todos los contratos con métodos abiertos en los que solo participa un proponente. | Buscar contratos en los que todos los particpantes reciben contrato. | . Funcionarios que intervienen en contrataciones . mydb.func_contrat.count_documents({}) . 113795 . mydb.func_contrat.find_one() . {&#39;_id&#39;: ObjectId(&#39;5deb255d723b95da59c6a01b&#39;), &#39;id&#39;: &#39;c6dbd706-b539-476f-a400-4dd69ed4a757&#39;, &#39;fechaCaptura&#39;: &#39;&#39;, &#39;ejercicioFiscal&#39;: 2017, &#39;periodoEjercicio&#39;: {&#39;fechaInicial&#39;: &#39;2017/01/01&#39;, &#39;fechaFinal&#39;: &#39;2017/12/31&#39;}, &#39;idRamo&#39;: 6, &#39;ramo&#39;: &#39;HACIENDA Y CRÉDITO PÚBLICO&#39;, &#39;nombres&#39;: None, &#39;primerApellido&#39;: None, &#39;segundoApellido&#39;: None, &#39;genero&#39;: None, &#39;institucionDependencia&#39;: {&#39;siglas&#39;: &#39;CNBV&#39;, &#39;nombre&#39;: &#39;COMISIÓN NACIONAL BANCARIA Y DE VALORES&#39;, &#39;clave&#39;: &#39;6/B00&#39;}, &#39;puesto&#39;: {&#39;nombre&#39;: &#39;SUBDIRECTOR DE MEJORA A&#39;, &#39;nivel&#39;: None}, &#39;tipoArea&#39;: [&#39;R&#39;], &#39;nivelResponsabilidad&#39;: [&#39;A&#39;, &#39;T&#39;], &#39;tipoProcedimiento&#39;: 1, &#39;tipoActos&#39;: &#39;CONTRATACIONES&#39;, &#39;superiorInmediato&#39;: {&#39;nombres&#39;: None, &#39;primerApellido&#39;: None, &#39;segundoApellido&#39;: None, &#39;puesto&#39;: {&#39;nombre&#39;: None, &#39;nivel&#39;: None}}} . nombre_func_contrat = [f&#39;{r[&quot;nombres&quot;]} {r[&quot;primerApellido&quot;]} {r[&quot;segundoApellido&quot;]}&#39; for r in mydb.func_contrat.find({}, {&#39;_id&#39;:0, &#39;nombres&#39;: 1, &#39;primerApellido&#39;: 1, &#39;segundoApellido&#39;:1}) if all([r[&quot;nombres&quot;], r[&quot;primerApellido&quot;], r[&quot;segundoApellido&quot;]])] . Funcionarios sancionados . mydb.serv_sanc.count_documents({}) . 3575 . mydb.serv_sanc.find_one() . {&#39;_id&#39;: ObjectId(&#39;5deb27a2432e395ca7ba4a62&#39;), &#39;nombres&#39;: &#39;ZACARIAS&#39;, &#39;primerApellido&#39;: &#39;PEREZ&#39;, &#39;segundoApellido&#39;: &#39;GARCIA&#39;, &#39;institucionDependencia&#39;: {&#39;nombre&#39;: &#39;PROCURADURIA GENERAL DE LA REPUBLICA&#39;, &#39;siglas&#39;: &#39; &#39;}, &#39;autoridadSancionadora&#39;: &#39;ORGANO INTERNO DE CONTROL&#39;, &#39;expediente&#39;: &#39;520/99&#39;, &#39;resolucion&#39;: {&#39;fechaResolucion&#39;: &#39;17/11/2000&#39;}, &#39;tipoSancion&#39;: &#39;INHABILITACION&#39;, &#39;inhabilitacion&#39;: {&#39;fechaInicial&#39;: &#39;17/11/2000&#39;, &#39;fechaFinal&#39;: &#39;16/11/2020&#39;, &#39;observaciones&#39;: None}, &#39;multa&#39;: {&#39;monto&#39;: None, &#39;moneda&#39;: &#39;MXN&#39;}, &#39;causaMotivoHechos&#39;: &#39;ABUSO DE AUTORIDAD&#39;, &#39;puesto&#39;: &#39;AGENTE DE LA POLICIA JUDICIAL FEDERAL&#39;} . nombre_serv_sanc = [f&#39;{r[&quot;nombres&quot;]} {r[&quot;primerApellido&quot;]} {r[&quot;segundoApellido&quot;]}&#39; for r in mydb.serv_sanc.find({}, {&#39;_id&#39;:0, &#39;nombres&#39;: 1, &#39;primerApellido&#39;: 1, &#39;segundoApellido&#39;:1})] . casos_func = [p[&#39;contactPoint&#39;][&#39;name&#39;] for c in casos_contratos for p in c[&#39;parties&#39;] if p[&#39;roles&#39;]==[&#39;procuringEntity&#39;]] . set(casos_func).intersection(set(nombre_serv_sanc)) . set() . yt = list(set(df_contactos.name.unique().tolist()).intersection(set(nombre_serv_sanc))) len(yt) . 10 . yt . [&#39;MIGUEL ANGEL TORRES HERNANDEZ&#39;, &#39;AGUSTIN TOLEDO GADEA&#39;, &#39;OSCAR CHAVEZ MARTINEZ&#39;, &#39;JOSE LUIS CHAVEZ FLORES&#39;, &#39;MARIO HERNANDEZ DIAZ&#39;, &#39;RODRIGO MALDONADO SAHAGUN&#39;, &#39;ERIKA BENITEZ GARCIA&#39;, &#39;FRANCISCO FIERRO SILVA&#39;, &#39;JOSE LUIS GARCIA RODRIGUEZ&#39;, &#39;JOSE DE LA CRUZ RAMIREZ&#39;] . Particulares sancionados . mydb.part_sanc.count_documents({}) . 1853 . mydb.part_sanc.find_one() . {&#39;_id&#39;: ObjectId(&#39;5deb27d0715998a251b6be6b&#39;), &#39;fechaCaptura&#39;: &#39;2019-08-22&#39;, &#39;expediente&#39;: &#39;000270074/2017&#39;, &#39;nombreRazonSocial&#39;: &#39;CONSTRUCCIÓN ESPECIALIZADA Y TECNOLÓGICA DE MÉXICO, S.A. DE C.V.&#39;, &#39;rfc&#39;: &#39;ACV990407&#39;, &#39;telefono&#39;: &#39;01 961 61 5 30 09&#39;, &#39;domicilio&#39;: {&#39;clave&#39;: &#39;MX&#39;}, &#39;tipoSancion&#39;: &#39;ECONOMICA E INHABILITACIÓN&#39;, &#39;institucionDependencia&#39;: {&#39;nombre&#39;: &#39;SECRETARIA DE LA FUNCIÓN PÚBLICA&#39;, &#39;siglas&#39;: &#39;SFP&#39;}, &#39;tipoFalta&#39;: &#39;&#39;, &#39;causaMotivoHechos&#39;: &#39;NO ENTREGAR LA OBRA EN LA FECHA COMPROMETIDA PARA ELLO, ESTO ES EL 24 DE SEPTIEMBRE DE 2014&#39;, &#39;objetoContrato&#39;: &#39;&#39;, &#39;autoridadSancionadora&#39;: &#39;SECRETARIA DE LA FUNCIÓN PÚBLICA&#39;, &#39;responsableSancion&#39;: {&#39;nombres&#39;: &#39;MARÍA GUADALUPE VARGAS ÁLVAREZ&#39;, &#39;primerApellido&#39;: &#39;&#39;, &#39;segundoApellido&#39;: &#39;&#39;}, &#39;resolucion&#39;: {&#39;sentido&#39;: &#39;SANCIONATORIA CON MULTA E INHABILITACIÓN&#39;}, &#39;fechaNotificacion&#39;: &#39;2019-08-14&#39;, &#39;multa&#39;: {&#39;monto&#39;: &#39;504675.00&#39;, &#39;moneda&#39;: &#39;MXN&#39;}, &#39;plazo&#39;: {&#39;fechaInicial&#39;: &#39;2019-08-23&#39;}, &#39;observaciones&#39;: None} . rfc_sanc = [r[&#39;rfc&#39;] for r in mydb.part_sanc.find({&#39;rfc&#39;: {&#39;$ne&#39;: &#39;&#39;}}, {&#39;_id&#39;:0, &#39;rfc&#39;: 1})] . Red Mitchell . result1 = mydb.contrataciones.find({&#39;contracts&#39;: {&#39;$exists&#39;: True}}, [&#39;ocid&#39;, &#39;parties.id&#39;, &#39;parties.roles&#39;, &#39;parties.contactPoint&#39;, &#39;contracts.value.amount&#39;, &#39;date&#39;]) l1 = list(result1) . ocid_tenderer = pd.DataFrame([(c[&#39;ocid&#39;], p[&#39;id&#39;]) for c in l1 for p in c[&#39;parties&#39;] if p[&#39;roles&#39;] in [[&#39;tenderer&#39;, &#39;supplier&#39;], [&#39;tenderer&#39;]]], columns=[&#39;ocid&#39;, &#39;tenderer_id&#39;], ).set_index(&#39;ocid&#39;) ocid_tenderer.head() . tenderer_id . ocid . ocds-07smqs-1003803 E9C1C827AE1234CCF7AC4D9070BB597C | . ocds-07smqs-1003123 SCA031118BX7 | . ocds-07smqs-1003123 SAU0505307M9 | . ocds-07smqs-1003123 SCK070618C21 | . ocds-07smqs-1009245 R&amp;S811221KR6 | . ocid_funcionario = pd.DataFrame([(c[&#39;ocid&#39;], p[&#39;contactPoint&#39;].get(&#39;name&#39;, &#39;&#39;), p[&#39;id&#39;], c[&#39;contracts&#39;][0][&#39;value&#39;][&#39;amount&#39;], c[&#39;date&#39;]) for c in l1 for p in c[&#39;parties&#39;] if p[&#39;roles&#39;]==[&#39;procuringEntity&#39;]], columns=[&#39;ocid&#39;, &#39;funcionario_id&#39;, &#39;uc_id&#39;, &#39;valor_contrato&#39;, &#39;fecha&#39;]) .set_index(&#39;ocid&#39;) ocid_dependencia = pd.DataFrame([(c[&#39;ocid&#39;], p[&#39;id&#39;]) for c in l1 for p in c[&#39;parties&#39;] if p[&#39;roles&#39;]==[&#39;buyer&#39;]], columns=[&#39;ocid&#39;, &#39;dep_id&#39;]) .set_index(&#39;ocid&#39;) ocid_funcionario.head() . funcionario_id uc_id valor_contrato fecha . ocid . ocds-07smqs-1003803 José Gabriel Ramos Martínez | SAT970701NN3-006E00002 | 8451072.00 | 2016-02-19T01:09:18Z | . ocds-07smqs-1003123 Ignacio Romero Sánchez | PGR850101RC6-017000017 | 168000.00 | 2016-02-19T01:49:22Z | . ocds-07smqs-1009245 Juan Fernando Meza Zavala | STP401231P53-014000999 | 420689.55 | 2016-02-26T05:33:08Z | . ocds-07smqs-1012355 Luis Eduardo Vega Becerra | CNU800928K31-018E00999 | 20000.00 | 2016-03-02T01:58:39Z | . ocds-07smqs-1025654 Marco Antonio Brito Vidales | IAA6210025R4-006A00996 | 10604000.00 | 2016-03-18T06:40:28Z | . ocid_tender_fun = ocid_tenderer.join([ocid_funcionario, ocid_dependencia]) ocid_tender_fun . tenderer_id funcionario_id uc_id valor_contrato fecha dep_id . ocid . ocds-07smqs-1001024 ELE9012281G2 | Evelyn López Valverde | LIC950821M84-020VST003 | 1.152540e+05 | 2016-03-15T01:02:50Z | LICONSA-231 | . ocds-07smqs-1001040 HIG090519H30 | Nicolas Gonzalez Bustos | HIM871203BS0-012NBG001 | 2.603075e+07 | 2016-02-16T02:44:58Z | HIM-163 | . ocds-07smqs-1001984 282910F3163E9D7DBC543E53CD9347B6 | Nicolas Gonzalez Bustos | HIM871203BS0-012NBG001 | 1.071380e+05 | 2016-02-17T04:42:35Z | HIM-163 | . ocds-07smqs-1002362 IPS040121S66 | Nicolas Gonzalez Bustos | HIM871203BS0-012NBG001 | 2.115000e+05 | 2016-02-17T07:30:57Z | HIM-163 | . ocds-07smqs-1003123 SCA031118BX7 | Ignacio Romero Sánchez | PGR850101RC6-017000017 | 1.680000e+05 | 2016-02-19T01:49:22Z | PGR-251 | . ... ... | ... | ... | ... | ... | ... | . ocds-07smqs-999514 CPC131113AT4 | Luis Enrique Mendoza Flores | IMS421231I45-050GYR026 | 7.317600e+04 | 2016-02-12T01:34:46Z | IMSS-192 | . ocds-07smqs-999514 96A74A55F4E5DAEC0797B59049D8EC81 | Luis Enrique Mendoza Flores | IMS421231I45-050GYR026 | 7.317600e+04 | 2016-02-12T01:34:46Z | IMSS-192 | . ocds-07smqs-999514 TGH130612IK1 | Luis Enrique Mendoza Flores | IMS421231I45-050GYR026 | 7.317600e+04 | 2016-02-12T01:34:46Z | IMSS-192 | . ocds-07smqs-999514 SIN011023UC8 | Luis Enrique Mendoza Flores | IMS421231I45-050GYR026 | 7.317600e+04 | 2016-02-12T01:34:46Z | IMSS-192 | . ocds-07smqs-999514 GMC09121623A | Luis Enrique Mendoza Flores | IMS421231I45-050GYR026 | 7.317600e+04 | 2016-02-12T01:34:46Z | IMSS-192 | . 726038 rows × 6 columns . ocid_tender_fun.to_csv(f&#39;{dir_datos}/ocid_tender_fun.csv&#39;) .",
            "url": "http://blog.jjsantoso.com/analisis%20de%20datos/pandas/pymongo/2020/01/20/redes-contratos-compranet.html",
            "relUrl": "/analisis%20de%20datos/pandas/pymongo/2020/01/20/redes-contratos-compranet.html",
            "date": " • Jan 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Bio",
          "content": ". Soy un economista apasionado por el análisis de datos, la estadística y la visualización. Trabajo en la Unidad de Ciencia de Datos del Laboratorio Nacional de Políticas Públicas del CIDE donde hacemos análisis de datos para temas de políticas públicas. A veces doy cursos de Python. A veces participo en datatones. Aquí pueden conocer algo de los proyectos personales en los que me gusta trabajar. . Soy de Cartagena (Colombia) y vivo en la Ciudad de México. Me gusta el montañismo y conocer la riqueza natural y cultural de México. . Me encuentran en Twitter como @jjsantoso y aquí está mi perfil en LinkedIn. Pueden consultar aquí mi CV o también revisar mi cuenta de GitHub. .",
          "url": "http://blog.jjsantoso.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://blog.jjsantoso.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}